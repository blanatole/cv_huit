"""
Module ƒë·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Google Drive s·ª≠ d·ª•ng Google Drive API
"""

import os
import io
import zipfile
import rarfile
import subprocess
import platform
from typing import Optional, Tuple
from tqdm import tqdm

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.errors import HttpError


class GoogleDriveDownloader:
    """Class ƒë·ªÉ t·∫£i file t·ª´ Google Drive s·ª≠ d·ª•ng Service Account"""
    
    def __init__(self, service_account_file: str = 'service_account.json'):
        """
        Kh·ªüi t·∫°o Google Drive downloader
        
        Args:
            service_account_file: ƒê∆∞·ªùng d·∫´n t·ªõi file JSON service account
        """
        self.service_account_file = service_account_file
        self.scopes = ['https://www.googleapis.com/auth/drive.readonly']
        self.service = None
        self._authenticate()
    
    def _authenticate(self):
        """X√°c th·ª±c v·ªõi Google Drive API"""
        try:
            if not os.path.exists(self.service_account_file):
                raise FileNotFoundError(f"Service account file kh√¥ng t·ªìn t·∫°i: {self.service_account_file}")
            
            # X√°c th·ª±c
            creds = service_account.Credentials.from_service_account_file(
                self.service_account_file, scopes=self.scopes)
            
            # T·∫°o service Drive
            self.service = build('drive', 'v3', credentials=creds)
            print("‚úÖ X√°c th·ª±c Google Drive API th√†nh c√¥ng")
            
        except Exception as e:
            print(f"‚ùå L·ªói x√°c th·ª±c Google Drive API: {str(e)}")
            raise
    
    def get_file_info(self, file_id: str) -> Optional[dict]:
        """
        L·∫•y th√¥ng tin file t·ª´ Google Drive
        
        Args:
            file_id: ID c·ªßa file tr√™n Google Drive
            
        Returns:
            Dict ch·ª©a th√¥ng tin file ho·∫∑c None n·∫øu l·ªói
        """
        try:
            file_info = self.service.files().get(fileId=file_id).execute()
            return file_info
        except HttpError as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin file: {str(e)}")
            return None
    
    def download_file(self, file_id: str, output_path: str, show_progress: bool = True) -> bool:
        """
        T·∫£i file t·ª´ Google Drive

        Args:
            file_id: ID c·ªßa file tr√™n Google Drive
            output_path: ƒê∆∞·ªùng d·∫´n l∆∞u file
            show_progress: Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh

        Returns:
            True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # L·∫•y th√¥ng tin file
            file_info = self.get_file_info(file_id)
            if not file_info:
                return False

            file_name = file_info.get('name', 'unknown_file')
            file_size = file_info.get('size')

            print(f"üì• ƒêang t·∫£i file: {file_name}")

            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            if file_size and file_size.isdigit():
                file_size_int = int(file_size)
                print(f"üìä K√≠ch th∆∞·ªõc: {self._format_size(file_size_int)}")
            else:
                file_size_int = 0
                print(f"üìä K√≠ch th∆∞·ªõc: Kh√¥ng x√°c ƒë·ªãnh (file c√≥ th·ªÉ ƒë∆∞·ª£c n√©n ho·∫∑c l√† Google Docs)")

            # T·∫°o th∆∞ m·ª•c n·∫øu c·∫ßn
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            # G·ª≠i y√™u c·∫ßu t·∫£i file
            request = self.service.files().get_media(fileId=file_id)

            # T·∫°o file ƒë·ªÉ ghi
            with open(output_path, 'wb') as fh:
                downloader = MediaIoBaseDownload(fh, request)

                if show_progress and file_size_int > 0:
                    # S·ª≠ d·ª•ng tqdm v·ªõi k√≠ch th∆∞·ªõc file bi·∫øt tr∆∞·ªõc
                    pbar = tqdm(total=file_size_int, unit='B', unit_scale=True, desc="Downloading")

                    done = False
                    while not done:
                        status, done = downloader.next_chunk()
                        if status:
                            downloaded = int(status.resumable_progress)
                            pbar.update(downloaded - pbar.n)

                    pbar.close()
                elif show_progress:
                    # S·ª≠ d·ª•ng tqdm kh√¥ng bi·∫øt k√≠ch th∆∞·ªõc file
                    print("üì• ƒêang t·∫£i... (hi·ªÉn th·ªã ti·∫øn tr√¨nh theo %)")

                    done = False
                    last_progress = 0
                    while not done:
                        try:
                            status, done = downloader.next_chunk()
                            if status:
                                current_progress = int(status.progress() * 100)
                                if current_progress > last_progress:
                                    print(f"üì• Ti·∫øn tr√¨nh: {current_progress}%")
                                    last_progress = current_progress
                        except Exception as chunk_error:
                            print(f"‚ö†Ô∏è L·ªói khi t·∫£i chunk: {str(chunk_error)}")
                            # Th·ª≠ ti·∫øp t·ª•c
                            continue
                else:
                    # T·∫£i kh√¥ng c√≥ thanh ti·∫øn tr√¨nh
                    done = False
                    while not done:
                        status, done = downloader.next_chunk()
                        if status and show_progress:
                            print(f"ƒêang t·∫£i: {int(status.progress() * 100)}%")

            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file ƒë√£ t·∫£i
            if os.path.exists(output_path):
                actual_size = os.path.getsize(output_path)
                print(f"‚úÖ T·∫£i file th√†nh c√¥ng: {output_path}")
                print(f"üìä K√≠ch th∆∞·ªõc th·ª±c t·∫ø: {self._format_size(actual_size)}")
            else:
                print(f"‚ùå File kh√¥ng ƒë∆∞·ª£c t·∫°o: {output_path}")
                return False

            return True

        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i file: {str(e)}")
            return False
    
    def _format_size(self, size_bytes: int) -> str:
        """ƒê·ªãnh d·∫°ng k√≠ch th∆∞·ªõc file"""
        if size_bytes == 0:
            return "0B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f}{size_names[i]}"


class DatasetManager:
    """Class ƒë·ªÉ qu·∫£n l√Ω vi·ªác t·∫£i v√† gi·∫£i n√©n dataset"""
    
    def __init__(self, downloader: GoogleDriveDownloader):
        self.downloader = downloader
    
    def setup_data_structure(self):
        """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c data"""
        directories = [
            'data',
            'data/train',
            'data/train/images',
            'data/train/ground_truth',
            'data/val',
            'data/val/images', 
            'data/val/ground_truth',
            'data/test',
            'data/test/images',
            'data/test/ground_truth'
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            print(f"üìÅ T·∫°o th∆∞ m·ª•c: {directory}")
    
    def install_unrar_if_needed(self) -> bool:
        """C√†i ƒë·∫∑t unrar n·∫øu c·∫ßn thi·∫øt tr√™n Linux"""
        system = platform.system().lower()
        
        if system == 'windows':
            return True  # Windows kh√¥ng c·∫ßn unrar command line
        
        # Ki·ªÉm tra xem unrar ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
        try:
            subprocess.run(['unrar'], capture_output=True, check=False)
            return True
        except FileNotFoundError:
            pass
        
        # Th·ª≠ c√†i ƒë·∫∑t unrar
        print("üîß ƒêang c√†i ƒë·∫∑t unrar...")
        try:
            # Th·ª≠ c√†i ƒë·∫∑t v·ªõi apt (Ubuntu/Debian)
            subprocess.run(['sudo', 'apt', 'update'], check=True, capture_output=True)
            subprocess.run(['sudo', 'apt', 'install', '-y', 'unrar'], check=True)
            print("‚úÖ ƒê√£ c√†i ƒë·∫∑t unrar th√†nh c√¥ng")
        except subprocess.CalledProcessError:
            try:
                # Th·ª≠ c√†i ƒë·∫∑t v·ªõi yum (CentOS/RHEL)
                subprocess.run(['sudo', 'yum', 'install', '-y', 'unrar'], check=True)
                print("‚úÖ ƒê√£ c√†i ƒë·∫∑t unrar th√†nh c√¥ng")
            except subprocess.CalledProcessError:
                print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t unrar t·ª± ƒë·ªông. Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng:")
                print("   Ubuntu/Debian: sudo apt install unrar")
                print("   CentOS/RHEL: sudo yum install unrar")
                return False
        return True
    
    def extract_archive(self, archive_path: str, extract_to: str) -> bool:
        """
        Gi·∫£i n√©n file zip ho·∫∑c rar
        
        Args:
            archive_path: ƒê∆∞·ªùng d·∫´n file n√©n
            extract_to: Th∆∞ m·ª•c gi·∫£i n√©n
            
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        print(f"üìÇ ƒêang gi·∫£i n√©n {archive_path}...")
        
        try:
            if archive_path.endswith('.zip'):
                with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_to)
            elif archive_path.endswith('.rar'):
                try:
                    with rarfile.RarFile(archive_path, 'r') as rar_ref:
                        rar_ref.extractall(extract_to)
                except rarfile.Error:
                    # Fallback to command line unrar
                    try:
                        subprocess.run(['unrar', 'x', archive_path, extract_to], check=True)
                    except (subprocess.CalledProcessError, FileNotFoundError):
                        print("‚ùå Kh√¥ng th·ªÉ gi·∫£i n√©n file RAR. C·∫ßn c√†i ƒë·∫∑t unrar ho·∫∑c rarfile")
                        print("   C√†i ƒë·∫∑t: pip install rarfile")
                        print("   Ho·∫∑c: sudo apt install unrar (Linux)")
                        return False
            else:
                raise ValueError(f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {archive_path}")
            
            print(f"‚úÖ ƒê√£ gi·∫£i n√©n th√†nh c√¥ng v√†o {extract_to}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi gi·∫£i n√©n: {str(e)}")
            return False
    
    def download_and_extract_dataset(self, file_id: str, temp_dir: str = 'temp_downloads') -> bool:
        """
        T·∫£i v√† gi·∫£i n√©n dataset t·ª´ Google Drive
        
        Args:
            file_id: ID file tr√™n Google Drive
            temp_dir: Th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file t·∫£i v·ªÅ
            
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫£i ISIC dataset t·ª´ Google Drive...")
        print("‚ö†Ô∏è  L∆∞u √Ω: Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t t√πy thu·ªôc v√†o t·ªëc ƒë·ªô m·∫°ng")
        
        # Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
        if os.path.exists('data/train/images') and len(os.listdir('data/train/images')) > 0:
            print("‚úÖ D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫£i")
            return True
        
        try:
            # C√†i ƒë·∫∑t unrar n·∫øu c·∫ßn thi·∫øt (Linux)
            if not self.install_unrar_if_needed():
                return False
            
            # T·∫°o th∆∞ m·ª•c t·∫°m
            os.makedirs(temp_dir, exist_ok=True)
            
            # L·∫•y th√¥ng tin file ƒë·ªÉ x√°c ƒë·ªãnh extension
            file_info = self.downloader.get_file_info(file_id)
            if not file_info:
                print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin file")
                return False
            
            file_name = file_info.get('name', 'data.rar')
            output_path = os.path.join(temp_dir, file_name)
            
            # T·∫£i file t·ª´ Google Drive
            print(f"\nüì• ƒêang t·∫£i {file_name} t·ª´ Google Drive...")
            if not self.downloader.download_file(file_id, output_path):
                return False
            
            # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
            print("\nüìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c...")
            self.setup_data_structure()
            
            # Gi·∫£i n√©n file
            print(f"\nüìÇ ƒêang gi·∫£i n√©n {file_name}...")
            if not self.extract_archive(output_path, '.'):
                return False
            
            # X√≥a file n√©n sau khi gi·∫£i n√©n
            os.remove(output_path)
            
            # X√≥a th∆∞ m·ª•c t·∫°m
            try:
                os.rmdir(temp_dir)
            except:
                pass
            
            print("\nüéâ Dataset download v√† extract ho√†n th√†nh!")
            print("üìÅ C·∫•u tr√∫c d·ªØ li·ªáu:")
            print("   data/")
            print("   ‚îú‚îÄ‚îÄ train/images/")
            print("   ‚îú‚îÄ‚îÄ train/ground_truth/")
            print("   ‚îú‚îÄ‚îÄ val/images/")
            print("   ‚îú‚îÄ‚îÄ val/ground_truth/")
            print("   ‚îú‚îÄ‚îÄ test/images/")
            print("   ‚îî‚îÄ‚îÄ test/ground_truth/")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
            print("\nüîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
            print("1. Ki·ªÉm tra Google Drive File ID c√≥ ƒë√∫ng kh√¥ng")
            print("2. ƒê·∫£m b·∫£o file ƒë∆∞·ª£c chia s·∫ª v·ªõi service account")
            print("3. Ki·ªÉm tra file service_account.json c√≥ ƒë√∫ng kh√¥ng")
            print("4. Ki·ªÉm tra k·∫øt n·ªëi internet")
            print("5. Th·ª≠ t·∫£i th·ªß c√¥ng v√† gi·∫£i n√©n v√†o th∆∞ m·ª•c data/")
            return False


def main():
    """H√†m main ƒë·ªÉ test"""
    # ID file t·ª´ Google Drive link
    GOOGLE_DRIVE_FILE_ID = "1IL3JPRaxhKoQMjPk_AzNK5w4OsE2gjsI"
    
    try:
        # Kh·ªüi t·∫°o downloader
        downloader = GoogleDriveDownloader()
        
        # Kh·ªüi t·∫°o dataset manager
        dataset_manager = DatasetManager(downloader)
        
        # T·∫£i v√† gi·∫£i n√©n dataset
        if dataset_manager.download_and_extract_dataset(GOOGLE_DRIVE_FILE_ID):
            print("\nüìù B∆∞·ªõc ti·∫øp theo:")
            print("1. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i ƒë√∫ng")
            print("2. B·∫Øt ƒë·∫ßu training models!")
        else:
            print("\n‚ùå T·∫£i d·ªØ li·ªáu th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c t·∫£i th·ªß c√¥ng.")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")


if __name__ == "__main__":
    main()
